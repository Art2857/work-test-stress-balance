version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: webapp_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5433:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=1000
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c work_mem=8MB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c max_wal_size=2GB
      -c min_wal_size=512MB
      -c effective_io_concurrency=200
      -c random_page_cost=1.1
      -c tcp_keepalives_idle=300
      -c tcp_keepalives_interval=30
      -c tcp_keepalives_count=3
      -c deadlock_timeout=1s
      -c lock_timeout=5s
      -c statement_timeout=30s
      -c log_min_duration_statement=1000
      -c log_connections=off
      -c log_disconnections=off
      -c log_statement=none
      -c synchronous_commit=off
      -c fsync=on
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  app1:
    build: .
    container_name: webapp_server_1
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/webapp_test
      SWAGGER_ENABLED: "true"
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app2:
    build: .
    container_name: webapp_server_2
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/webapp_test
      SWAGGER_ENABLED: "true"
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app3:
    build: .
    container_name: webapp_server_3
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/webapp_test
      SWAGGER_ENABLED: "true"
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app4:
    build: .
    container_name: webapp_server_4
    environment:
      NODE_ENV: development
      PORT: 3004
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/webapp_test
      SWAGGER_ENABLED: "true"
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app5:
    build: .
    container_name: webapp_server_5
    environment:
      NODE_ENV: development
      PORT: 3005
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/webapp_test
      SWAGGER_ENABLED: "true"
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: webapp_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
      - app3
      - app4
      - app5

volumes:
  postgres_data: 