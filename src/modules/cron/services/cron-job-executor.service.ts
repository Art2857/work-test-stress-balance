import { CronJob } from '../domain/cron-job.entity';

export interface JobFunction {
  (executionId: number): Promise<string>;
}

export class CronJobExecutor {
  private jobFunctions: Map<string, JobFunction> = new Map();

  constructor() {
    this.registerJobFunctions();
  }

  private registerJobFunctions(): void {
    this.jobFunctions.set('dataCleanupJob', this.dataCleanupJob.bind(this));
    this.jobFunctions.set(
      'reportGenerationJob',
      this.reportGenerationJob.bind(this)
    );
    this.jobFunctions.set('backupJob', this.backupJob.bind(this));
    this.jobFunctions.set('notificationJob', this.notificationJob.bind(this));
    this.jobFunctions.set('analyticsJob', this.analyticsJob.bind(this));
  }

  async executeJob(job: CronJob, executionId: number): Promise<string> {
    const jobFunction = this.jobFunctions.get(job.functionName);

    if (!jobFunction) {
      throw new Error(`Job function '${job.functionName}' not found`);
    }

    const startTime = Date.now();
    console.log(
      `üìã Executing job '${job.name}' (${job.functionName}) - Execution ID: ${executionId}`
    );

    const result = await jobFunction(executionId);

    const duration = Date.now() - startTime;
    console.log(`‚è±Ô∏è Job '${job.name}' execution completed in ${duration}ms`);

    return result;
  }

  private async dataCleanupJob(executionId: number): Promise<string> {
    const steps = [
      '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π',
      '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö',
      '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      '–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
      '–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—á–∏—Å—Ç–∫–µ',
    ];

    let processedItems = 0;
    const totalItems = 1247;

    for (let i = 0; i < steps.length; i++) {
      const step = steps[i];
      console.log(`[${executionId}] –®–∞–≥ ${i + 1}/${steps.length}: ${step}`);

      const stepDuration = 18000 + Math.random() * 12000;
      const stepItems = Math.floor(totalItems / steps.length);

      await this.simulateProgressiveWork(
        stepDuration,
        stepItems,
        (progress, items) => {
          processedItems += items;
          if (Math.random() < 0.1) {
            console.log(
              `[${executionId}] ${step}: ${progress}% (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedItems}/${totalItems} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`
            );
          }
        }
      );
    }

    return `–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedItems} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${Math.floor(Math.random() * 500 + 100)}MB –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞`;
  }

  private async reportGenerationJob(executionId: number): Promise<string> {
    const reports = [
      '–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã',
      '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      '–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π',
      '–û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç—É–ø—É',
      '–°–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫',
      '–û—Ç—á–µ—Ç –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤',
    ];

    const generatedReports = [];

    for (let i = 0; i < reports.length; i++) {
      const reportName = reports[i];
      console.log(
        `[${executionId}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ ${i + 1}/${reports.length}: ${reportName}`
      );

      const steps = [
        '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö',
        '–ê–Ω–∞–ª–∏–∑',
        '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞',
      ];
      for (const step of steps) {
        console.log(`[${executionId}] ${reportName} - ${step}`);
        await this.sleep(8000 + Math.random() * 7000);
      }

      const reportSize = Math.floor(Math.random() * 5000 + 1000);
      generatedReports.push(`${reportName} (${reportSize}KB)`);
    }

    return `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${generatedReports.length}. –î–µ—Ç–∞–ª–∏: ${generatedReports.join(', ')}`;
  }

  private async backupJob(executionId: number): Promise<string> {
    const backupTasks = [
      { name: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', size: 2500 },
      { name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', size: 150 },
      { name: '–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', size: 800 },
      { name: '–ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã', size: 15000 },
      { name: '–î–æ–∫—É–º–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã', size: 600 },
    ];

    let totalBackedUp = 0;
    const backupResults = [];

    for (const task of backupTasks) {
      console.log(`[${executionId}] –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${task.name}`);

      await this.simulateProgressiveWork(
        25000 + Math.random() * 15000,
        task.size,
        progress => {
          if (progress % 20 === 0) {
            console.log(
              `[${executionId}] ${task.name}: ${progress}% (${Math.floor((task.size * progress) / 100)}MB)`
            );
          }
        }
      );

      totalBackedUp += task.size;
      backupResults.push(`${task.name}: ${task.size}MB`);

      await this.sleep(2000);
    }

    return `–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${totalBackedUp}MB. –î–µ—Ç–∞–ª–∏: ${backupResults.join(', ')}`;
  }

  private async notificationJob(executionId: number): Promise<string> {
    const notificationTypes = [
      { type: 'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', count: 1250 },
      { type: 'SMS —Ä–∞—Å—Å—ã–ª–∫–∞', count: 340 },
      { type: 'Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', count: 2100 },
      { type: '–í–Ω—É—Ç—Ä–∏—Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', count: 890 },
      { type: 'Webhook –≤—ã–∑–æ–≤—ã', count: 150 },
    ];

    let totalSent = 0;
    const results = [];

    for (const notification of notificationTypes) {
      console.log(`[${executionId}] –û—Ç–ø—Ä–∞–≤–∫–∞ ${notification.type}`);

      const batchSize = 50;
      const batches = Math.ceil(notification.count / batchSize);

      for (let batch = 0; batch < batches; batch++) {
        const currentBatchSize = Math.min(
          batchSize,
          notification.count - batch * batchSize
        );
        await this.sleep(3000 + Math.random() * 2000);

        totalSent += currentBatchSize;

        if (batch % 5 === 0) {
          const progress = Math.floor(((batch + 1) / batches) * 100);
          console.log(
            `[${executionId}] ${notification.type}: ${progress}% (${batch * batchSize + currentBatchSize}/${notification.count})`
          );
        }
      }

      results.push(`${notification.type}: ${notification.count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    }

    return `–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalSent}. –î–µ—Ç–∞–ª–∏: ${results.join(', ')}`;
  }

  private async analyticsJob(executionId: number): Promise<string> {
    const analyticsSteps = [
      '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
      '–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
      '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏–∑–∞',
      '–†–∞—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫',
      '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π',
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤',
      '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞',
    ];

    let processedRecords = 0;
    const totalRecords = 45000;
    const insights = [];

    for (let i = 0; i < analyticsSteps.length; i++) {
      const step = analyticsSteps[i];
      console.log(
        `[${executionId}] –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–ø ${i + 1}/${analyticsSteps.length}: ${step}`
      );

      const stepRecords = Math.floor(totalRecords / analyticsSteps.length);
      const stepDuration = 20000 + Math.random() * 10000;

      await this.simulateProgressiveWork(
        stepDuration,
        stepRecords,
        (progress, records) => {
          processedRecords += records;

          if (progress % 25 === 0) {
            console.log(
              `[${executionId}] ${step}: ${progress}% (${processedRecords}/${totalRecords} –∑–∞–ø–∏—Å–µ–π)`
            );
          }
        }
      );

      if (i >= 3) {
        const insight = this.generateRandomInsight();
        insights.push(insight);
        console.log(`[${executionId}] –ù–∞–π–¥–µ–Ω –∏–Ω—Å–∞–π—Ç: ${insight}`);
      }
    }

    return `–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRecords} –∑–∞–ø–∏—Å–µ–π, –Ω–∞–π–¥–µ–Ω–æ ${insights.length} –∏–Ω—Å–∞–π—Ç–æ–≤: ${insights.join('; ')}`;
  }

  private generateRandomInsight(): string {
    const insights = [
      '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 15% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π',
      '–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 14:00-16:00',
      '–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º (78% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)',
      '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 12 –º–∏–Ω—É—Ç',
      '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞–ø—Ä–æ—Å–∞ –∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏',
      '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 45% –†–æ—Å—Å–∏—è, 20% –°–ù–ì, 35% –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã',
    ];

    return insights[Math.floor(Math.random() * insights.length)];
  }

  private async simulateProgressiveWork(
    durationMs: number,
    totalItems: number,
    progressCallback?: (progress: number, itemsDelta: number) => void
  ): Promise<void> {
    const steps = 20;
    const stepDuration = durationMs / steps;
    const itemsPerStep = Math.floor(totalItems / steps);

    for (let i = 0; i < steps; i++) {
      await this.sleep(stepDuration);
      const progress = Math.floor(((i + 1) / steps) * 100);

      if (progressCallback) {
        progressCallback(progress, itemsPerStep);
      }
    }
  }

  private async sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  registerJobFunction(name: string, func: JobFunction): void {
    this.jobFunctions.set(name, func);
  }

  getAvailableFunctions(): string[] {
    return Array.from(this.jobFunctions.keys());
  }
}
